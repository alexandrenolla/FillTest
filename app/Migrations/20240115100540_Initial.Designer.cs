// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using app.Services;

#nullable disable

namespace app.Migrations
{
    [DbContext(typeof(EstateAgencyDbContext))]
    [Migration("20240115100540_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("app.Models.RealState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("BedroomQuantity")
                        .HasColumnType("int");

                    b.Property<string>("BusinessType")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Price")
                        .HasPrecision(16, 2)
                        .HasColumnType("decimal(16,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rodovia Jornalista Maurício Sirotsky Sobrinho, 5145, Jurerê, Florianópolis, Santa Catarina, Brasil",
                            BedroomQuantity = 6,
                            BusinessType = "Aluguel",
                            Latitude = -27.4483702m,
                            Longitude = -48.4879555m,
                            Neighborhood = "Jurerê Internacional",
                            Price = 50000m,
                            Title = "Mansão Branca"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Rodovia Tertuliano Brito Xavier, 3100, Canasvieiras, Florianópolis, Santa Catarina, Brasil",
                            BedroomQuantity = 3,
                            BusinessType = "Venda",
                            Latitude = -27.4360093m,
                            Longitude = -48.47891629999999m,
                            Neighborhood = "Canasvieiras",
                            Price = 650000m,
                            Title = "Apartamento"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Rua dos Tambaquis, Jurerê Internacional, Florianópolis, Santa Catarina, Brasil",
                            BedroomQuantity = 5,
                            BusinessType = "Venda",
                            Latitude = -27.4381978m,
                            Longitude = -48.497063m,
                            Neighborhood = "Jurerê",
                            Price = 3000000m,
                            Title = "Casa Azul"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Rua das Tibiras, Jurerê Internacional, Florianópolis, Santa Catarina, Brasil",
                            BedroomQuantity = 5,
                            BusinessType = "Venda",
                            Latitude = -27.4431942m,
                            Longitude = -48.4958667m,
                            Neighborhood = "Jurerê",
                            Price = 5000000m,
                            Title = "Mansão Amarela"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Rua das Algas, 488, Jurerê Internacional, Florianópolis, Santa Catarina, Brasil",
                            BedroomQuantity = 3,
                            BusinessType = "Aluguel",
                            Latitude = -27.4440168m,
                            Longitude = -48.4946392m,
                            Neighborhood = "Jurerê",
                            Price = 30000m,
                            Title = "Casa"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Rodovia Tertuliano Brito Xavier, 3000, Canasvieiras, Florianópolis, Santa Catarina, Brasil",
                            BedroomQuantity = 3,
                            BusinessType = "Venda",
                            Latitude = -27.4350784m,
                            Longitude = -48.478676m,
                            Neighborhood = "Canasvieiras",
                            Price = 1000000m,
                            Title = "Casa na praia"
                        });
                });

            modelBuilder.Entity("app.Models.RealStateImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageFileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RealStateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RealStateId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageFileName = "casa.jpeg",
                            RealStateId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageFileName = "casa2.jpeg",
                            RealStateId = 1
                        },
                        new
                        {
                            Id = 3,
                            ImageFileName = "casa3.jpeg",
                            RealStateId = 1
                        },
                        new
                        {
                            Id = 4,
                            ImageFileName = "casa4.jpeg",
                            RealStateId = 2
                        },
                        new
                        {
                            Id = 5,
                            ImageFileName = "casa5.jpeg",
                            RealStateId = 2
                        },
                        new
                        {
                            Id = 6,
                            ImageFileName = "casa6.jpeg",
                            RealStateId = 2
                        },
                        new
                        {
                            Id = 7,
                            ImageFileName = "casa7.jpeg",
                            RealStateId = 3
                        },
                        new
                        {
                            Id = 8,
                            ImageFileName = "casa8.jpeg",
                            RealStateId = 3
                        },
                        new
                        {
                            Id = 9,
                            ImageFileName = "casa9.jpeg",
                            RealStateId = 4
                        },
                        new
                        {
                            Id = 10,
                            ImageFileName = "casa10.jpeg",
                            RealStateId = 4
                        },
                        new
                        {
                            Id = 11,
                            ImageFileName = "casa11.jpeg",
                            RealStateId = 5
                        },
                        new
                        {
                            Id = 12,
                            ImageFileName = "casa12.jpeg",
                            RealStateId = 5
                        },
                        new
                        {
                            Id = 13,
                            ImageFileName = "casa13.jpeg",
                            RealStateId = 6
                        },
                        new
                        {
                            Id = 14,
                            ImageFileName = "casa14.jpeg",
                            RealStateId = 6
                        },
                        new
                        {
                            Id = 15,
                            ImageFileName = "casa15.jpeg",
                            RealStateId = 6
                        });
                });

            modelBuilder.Entity("app.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alexandrenolla@gmail.com",
                            Name = "Alexandre Nolla",
                            Password = "fullstack123",
                            Telephone = "48988050165"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("app.Models.RealStateImage", b =>
                {
                    b.HasOne("app.Models.RealState", "RealState")
                        .WithMany("RealStateImages")
                        .HasForeignKey("RealStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RealState");
                });

            modelBuilder.Entity("app.Models.RealState", b =>
                {
                    b.Navigation("RealStateImages");
                });
#pragma warning restore 612, 618
        }
    }
}
